#Grammaire

# $i désigne un token simple
# * peut désigner un token simple (prend alors le sens nominal) ou un mot qui a une autre signification avec une autre des règles de la grammaire (appel recursif)
# + désigne un ou des différent matching. un + au début ou à la fin donne la possibilité d'un epsilon
# % désigne un mot contenant plusieurs tokens, qui seront interprété avec un AND

#Les règles sont écritent ainsi :
#

# gestion générale utilitaire
$1 o+ * ie+tie -> POSS($1,*)
* o+ $1 ie+tie -> POSS($1,*)
$1 ie -> N($1)
$1 è+ se -> N($1)
$1 è+ de -> N($1)

$1 o+ * t+ isme -> A1(isme,POSS($1,*))
* o+ $1 t+ isme -> A1(isme,POSS($1,*))
$1 t+ isme -> A1(isme,N($1))

$1 o+ * t+ ique+eux -> A1(ique,POSS($1,*))
* o+ $1 t+ ique+eux -> A1(ique,POSS($1,*))
$1 t+ ique+eux -> A1(ique,N($1))

$1 o+ * t+ iste -> A1(iste,POSS($1,*))
* o+ $1 t+ iste -> A1(iste,POSS($1,*))
$1 t+ iste -> A1(iste,N($1))

$1 o+ * ta+ ti f+ve -> A1(tif,POSS($1,*))
* o+ $1 ta+ ti f+ve -> A1(tif,POSS($1,*))
$1 ta+ ti f+ve -> A1(tif,N($1))

$1 o+ * al e+ -> A1(ique,A2(CONJONC_ADJ,*,ADJ($1)))
* o+ $1 al e+ -> A1(ique,A2(CONJONC_ADJ,*,ADJ($1)))
$1 al e+ -> A1(ale,ADJ($1))


$1 o+ * t+ al+ic ité -> A1(ité,A2(CONJONC_ADJ,*,ADJ($1)))
* o+ $1 t+ al+ic ité -> A1(ité,A2(CONJONC_ADJ,*,ADJ($1)))
$1 t+ al+ic ité -> A1(ité,N($1))

$1 o+ * t+ oï+i de -> A1(ide,POSS($1,*))
* o+ $1 t+ oï+i de -> A1(ide,POSS($1,*))
$1 t+ oï+i de -> A1(ide,N($1))

$1 * er+ier+ter+oter -> A2(CONJONC_VERBE,V($1),*)
* $1 er+ier+ter+oter -> A2(CONJONC_VERBE,V($1),*)
$1 er+ier+ter+oter -> V($1)


# gestions spécifiques
exo $1 * ie -> A2(exo,N($1),*)
endo $1 * ie -> A2(endo,N($1),*)
$1 * o+ log ie -> POSS(log,POSS($1,*))

#gestions suffixes
#* o+ vor e -> A1(vor,*)
#* o+ phag e -> A1(phag,*)
#* o+ phil e -> A1(phil,*)
#* o+ log ue -> A2(log,*)
#* o+ fèr e -> A1(fèr,*)
#* o+ phor e -> A1(phor,*)
#* o+ morph e -> A1(morph,*)
#* o+ soph e -> A1(soph,*)
#* o+ phon e -> A1(phon,*)
#* o+ graph e -> A1(graph,*)
#* o+ naut e -> A1(naut,*)
#* o+ dactyl e -> A1(dactyl,*)
#* o+ bol e -> A1(bol,*)
#* o+ plasm e -> A1(plasm,*)

* o+ $1 e -> A1($1,*)
$1 o+ * e -> A1($1,*)

* o+ log ue -> A2(log,*)

# règle de secours, servant plutôt de façon intermédiare pour les combos. n'est pas afficher s'il y a d'autres matchs
#$1 -> N($1)
#$1 o+ * -> A1($1,*)
#* o+ $1 -> A1($1,*)
#$1 o+ * -> ADJ($1,*)
#* o+ $1 -> ADJ($1,*)
#$1 o+ * -> POSS($1,*)
#* o+ $1 -> POSS($1,*)

$1 * -> A1($1,*)


